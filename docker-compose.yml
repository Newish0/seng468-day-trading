# To run docker compose: `docker-compose up --build`

networks:
  day-trading-network:
    driver: bridge

volumes:
  redis-data:


services:
  # Frontend and reverse proxy api gateway
  gateway:
    build:
      context: . # Need the entire services folder as context to copy from web-ui
      dockerfile: ./services/gateway/Dockerfile
    ports:
      - "8080:80"
    depends_on:
      - user-api
      - auth
      - stock-price
    networks:
      - day-trading-network

  # User API
  user-api:
    build:
      context: . # Use the project root as the build context for packages to work
      dockerfile: ./services/user-api/Dockerfile
    environment:
      - PORT=3000
      - REDIS_URL=redis://redis:6379
      - ORDER_SERVICE_HOST=http://order-manager:3002
    networks:
      - day-trading-network
    deploy:
      replicas: 4
    depends_on:
      order-manager:
        condition: service_started
      redis:
        condition: service_healthy

  # Redis Database
  redis:
    image: redis/redis-stack:latest
    ports:
      - "6379:6379"
      - "8001:8001"
    networks:
      - day-trading-network
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s

  rabbitmq:
    image: rabbitmq:management
    networks:
      - day-trading-network
    ports:
      - "5672:5672" # AMQP protocol port
      - "15672:15672" # Management interface port
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_port_connectivity" ]
      interval: 5s
      timeout: 3s
      retries: 5

  # Auth Service
  auth:
    build:
      context: . # Use the project root as the build context for packages to work
      dockerfile: ./services/auth/Dockerfile
    environment:
      - PORT=3000
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - day-trading-network
    deploy:
      replicas: 4

  # Order Placement/Cancellation Service
  order-manager:
    build:
      context: . # Use the project root as the build context for packages to work
      dockerfile: ./services/order-manager/Dockerfile
    environment:
      - PORT=3002
      - MATCHING_ENGINE_HOST=http://matching-engine:3003
      - REDIS_URL=redis://redis:6379
      - RABBIT_PORT=5672
      - RABBIT_HOST=rabbitmq
      - RABBIT_USER=guest
      - RABBIT_PASSWORD=guest
    depends_on:
      # matching-engine:
      #   condition: service_started
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - day-trading-network
    deploy:
      replicas: 3

  # Order Update Service
  order-update:
    build:
      context: . # Use the project root as the build context for packages to work
      dockerfile: ./services/order-update/Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - RABBIT_PORT=5672
      - RABBIT_HOST=rabbitmq
      - RABBIT_USER=guest
      - RABBIT_PASSWORD=guest
    depends_on:
      # matching-engine:
      #   condition: service_started
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - day-trading-network
    deploy:
      replicas: 3

  # Matching Engine (Rust)
  matching-engine-shard0:
    build:
      context: ./services/matching-engine
      dockerfile: Dockerfile
    networks:
      - day-trading-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - SHARD_ID=0
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest

  matching-engine-shard1:
    build:
      context: ./services/matching-engine
      dockerfile: Dockerfile
    networks:
      - day-trading-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - SHARD_ID=1
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest

  stock-price:
    build:
      context: ./services/stock-price
      dockerfile: Dockerfile
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
    depends_on:
      # matching-engine:
      #   condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - day-trading-network
